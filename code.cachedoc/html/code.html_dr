section_env([file_top_section,pragmas([]),paper_opts(1,afourpaper),coversec([],[],[],[],nop,nop,[]),level(0)],global_label("Práctica 1: Programación Lógica Pura"),[string_esc("Práctica 1: Programación Lógica Pura")],[show_toc(subparts),section_env([unnumbered,level(1),subfile(fulltoc),is_special(toc)],global_label("Table of Contents"),string_esc("Table of Contents"),[show_toc(full)]),[[],[raw_nl,[[section_env([level(2)],local_label("Introducción"),[string_esc("Introducción")],[string_esc(" "),p([]),string_esc("Este módulo implementa operaciones básicas para trabajar con bytes en diferentes representaciones. Los bytes pueden representarse en formato binario (como 8 bits) o en formato hexadecimal (como 2 dígitos hexadecimales)."),p([])]),section_env([level(2)],local_label("Representación de datos"),[string_esc("Representación de datos")],[string_esc(" "),p([]),string_esc("El módulo utiliza dos representaciones principales para los bytes:"),p([]),env_(itemize,[string_esc(" "),item([]),bf([string_esc("Bytes binarios")]),string_esc(": Representados como listas de 8 bits. Cada bit es una estructura b(0) o b(1). "),item([]),bf([string_esc("Bytes hexadecimales")]),string_esc(": Representados como listas de 2 dígitos hexadecimales. Cada dígito es una estructura h(X) donde X es un valor entre 0 y f. ")]),string_esc(" "),p([])]),section_env([level(2)],local_label("Funcionalidades"),[string_esc("Funcionalidades")],[string_esc(" "),p([]),string_esc("El módulo implementa las siguientes funcionalidades:"),p([]),env_(enumerate,[string_esc(" "),item([]),string_esc("Verificación de listas de bytes "),item([]),string_esc("Conversión entre representaciones binarias y hexadecimales "),item([]),string_esc("Obtención de un bit específico de un byte "),item([]),string_esc("Desplazamiento circular a la izquierda de listas de bytes "),item([]),string_esc("Desplazamiento circular a la derecha de listas de bytes "),item([]),string_esc("Operación XOR entre bytes ")]),string_esc(" "),p([])]),section_env([level(2)],local_label("Ejemplos de uso"),[string_esc("Ejemplos de uso")],[string_esc(" "),p([]),string_esc("A continuación, se presenta un ejemplo de cada funcionalidad principal del módulo."),p([]),bf([string_esc("Verificación de lista de bytes:")]),string_esc(" "),codeblock("text","
?- byte_list([[h(a),h(5)], [b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]).
false."),string_esc(" "),p([]),bf([string_esc("Conversión entre representaciones:")]),string_esc(" "),codeblock("text","
?- byte_convert([h(5),h(a)], BinByte).
BinByte = [b(0),b(1),b(0),b(1),b(1),b(0),b(1),b(0)]"),string_esc(" "),p([]),bf([string_esc("Conversión de listas de bytes:")]),string_esc(" "),codeblock("text","
?- byte_list_convert([[h(a),h(b)],[h(c),h(d)]], BinList).
BinList = [[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(1)],
           [b(1),b(1),b(0),b(0),b(1),b(1),b(0),b(1)]]"),string_esc(" "),p([]),bf([string_esc("Obtener bits específicos:")]),string_esc(" "),codeblock("text","
?- get_nth_bit_from_byte(s(s(s(0))), [h(5),h(a)], Bit).
Bit = b(0)"),string_esc(" "),p([]),bf([string_esc("Desplazamiento circular a la izquierda:")]),string_esc(" "),codeblock("text","
?- byte_list_clsh([[h(5),h(a)], [h(2),h(3)]], CLShL).
CLShL = [[h(b),h(4)], [h(4),h(6)]]"),string_esc(" "),p([]),bf([string_esc("Desplazamiento circular a la derecha:")]),string_esc(" "),codeblock("text","
?- byte_list_crsh([[h(b),h(4)], [h(4),h(6)]], CRShL).
CRShL = [[h(5),h(a)], [h(2),h(3)]]"),string_esc(" "),p([]),bf([string_esc("Operación XOR entre bytes:")]),string_esc(" "),codeblock("text","
?- byte_xor([h(a),h(5)], [h(5),h(a)], Result).
Result = [h(f),h(f)]")])]],linebreak],[section_env([with_parent,level(2)],local_label("Usage and interface"),string_esc("Usage and interface"),cartouche(itemize_env(bullet,[[item([]),bf([string_esc("Library usage"),string_esc(":")]),linebreak,tt(string_esc(":- use_module(/home/mihai/Practica1-PD/Practica1-PD/code.pl)."))],[item([]),bf([string_esc("Exports"),string_esc(":")]),linebreak,itemize_env(minus,[[[item([]),em([string_esc("Predicates"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("0"),string_esc("author_data/4"),string_esc("author_data/4")),string_esc(", ")],[idx_env(use,code,localnum_label("1"),string_esc("byte_list/1"),string_esc("byte_list/1")),string_esc(", ")],[idx_env(use,code,localnum_label("2"),string_esc("byte_convert/2"),string_esc("byte_convert/2")),string_esc(", ")],[idx_env(use,code,localnum_label("3"),string_esc("byte_list_convert/2"),string_esc("byte_list_convert/2")),string_esc(", ")],[idx_env(use,code,localnum_label("4"),string_esc("get_nth_bit_from_byte/3"),string_esc("get_nth_bit_from_byte/3")),string_esc(", ")],[idx_env(use,code,localnum_label("5"),string_esc("byte_list_clsh/2"),string_esc("byte_list_clsh/2")),string_esc(", ")],[idx_env(use,code,localnum_label("6"),string_esc("byte_list_crsh/2"),string_esc("byte_list_crsh/2")),string_esc(", ")],[idx_env(use,code,localnum_label("7"),string_esc("byte_xor/3"),string_esc("byte_xor/3")),string_esc(", ")],[idx_env(use,code,localnum_label("8"),string_esc("nibble_to_bits/2"),string_esc("nibble_to_bits/2")),string_esc(", ")],[idx_env(use,code,localnum_label("9"),string_esc("reverse_list/2"),string_esc("reverse_list/2")),string_esc(", ")],[idx_env(use,code,localnum_label("10"),string_esc("reverse_acc/3"),string_esc("reverse_acc/3")),string_esc(", ")],[idx_env(use,code,localnum_label("11"),string_esc("get_nth_bit/3"),string_esc("get_nth_bit/3")),string_esc(", ")],[idx_env(use,code,localnum_label("12"),string_esc("my_append/3"),string_esc("my_append/3")),string_esc(", ")],[idx_env(use,code,localnum_label("13"),string_esc("bytes_to_bits/2"),string_esc("bytes_to_bits/2")),string_esc(", ")],[idx_env(use,code,localnum_label("14"),string_esc("rotate_left/2"),string_esc("rotate_left/2")),string_esc(", ")],[idx_env(use,code,localnum_label("15"),string_esc("bits_to_bytes/2"),string_esc("bits_to_bytes/2")),string_esc(", ")],[idx_env(use,code,localnum_label("16"),string_esc("rotate_right/2"),string_esc("rotate_right/2")),string_esc(", ")],[idx_env(use,code,localnum_label("17"),string_esc("xor_list/3"),string_esc("xor_list/3")),string_esc(", ")],[idx_env(use,code,localnum_label("18"),string_esc("xor_bits/3"),string_esc("xor_bits/3")),string_esc(".")]],raw_nl]],nop,nop,nop,[item([]),em([string_esc("Regular Types"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("19"),string_esc("bit/1"),string_esc("bit/1")),string_esc(", ")],[idx_env(use,code,localnum_label("20"),string_esc("binary_byte/1"),string_esc("binary_byte/1")),string_esc(", ")],[idx_env(use,code,localnum_label("21"),string_esc("hexd/1"),string_esc("hexd/1")),string_esc(", ")],[idx_env(use,code,localnum_label("22"),string_esc("hex_byte/1"),string_esc("hex_byte/1")),string_esc(", ")],[idx_env(use,code,localnum_label("23"),string_esc("byte/1"),string_esc("byte/1")),string_esc(".")]],raw_nl]],nop],nop])],nop,nop,nop,nop]))),[],[],section_env([with_parent,level(2)],local_label("Documentation on exports"),string_esc("Documentation on exports"),[[defpred(local_label("author_data/4"),pred,"PREDICATE",author_data/4,[],[[string_esc("Define los datos del autor del módulo")],[[]]]),sp("1"),raw_nl],[defpred(local_label("bit/1"),regtype,"REGTYPE",bit/1,[],[[string_esc("Define el tipo bit binario. Un bit solo puede ser 0 o 1, representado estructuralmente como b(0) o b(1).")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("bit(B)")),string_esc([])],raw_nl],[var([string_esc("B")]),string_esc(" "),string_esc("es un bit binario representado como b(0) o b(1).")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("binary_byte/1"),regtype,"REGTYPE",binary_byte/1,[],[[string_esc("Define un byte binario como una lista ordenada de 8 bits. El primer elemento es el bit más significativo (posición 7), y el último elemento es el bit menos significativo (posición 0).")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("binary_byte(B)")),string_esc([])],raw_nl],[var([string_esc("B")]),string_esc(" "),string_esc("es una lista de 8 bits, del bit más significativo (posición 7) al menos significativo (posición 0).")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("hexd/1"),regtype,"REGTYPE",hexd/1,[],[[string_esc("Define un dígito hexadecimal (nibble). Cada dígito hex representa un valor de 4 bits (0-15). Aunque usamos constantes numéricas (0-9) y alfabéticas (a-f), se tratan como constantes simbólicas, no como números decimales.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("hexd(H)")),string_esc([])],raw_nl],[var([string_esc("H")]),string_esc(" "),string_esc("es un dígito hexadecimal (nibble) representado estructuralmente como h(X).")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("hex_byte/1"),regtype,"REGTYPE",hex_byte/1,[],[[string_esc("Define un byte hexadecimal como una lista ordenada de 2 dígitos hexadecimales. El primer elemento es el nibble más significativo (posición 1), y el segundo elemento es el nibble menos significativo (posición 0).")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("hex_byte(B)")),string_esc([])],raw_nl],[var([string_esc("B")]),string_esc(" "),string_esc("es una lista de 2 dígitos hexadecimales, del más significativo (posición 1) al menos significativo (posición 0).")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("byte/1"),regtype,"REGTYPE",byte/1,[],[[string_esc("Define el tipo byte como un byte binario o un byte hexadecimal. Esta abstracción permite múltiples representaciones del mismo concepto.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte(B)")),string_esc([])],raw_nl],[var([string_esc("B")]),string_esc(" "),string_esc("es un byte, ya sea en formato binario o hexadecimal.")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("byte_list/1"),pred,"PREDICATE",byte_list/1,[],[[string_esc("Este predicado es cierto cuando L es una lista válida de bytes. Cada elemento de la lista debe ser un byte binario (8 bits) o un byte hexadecimal (2 nibbles). La implementación utiliza recursión con dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Caso base: Una lista vacía es una lista de bytes válida "),item([string_esc("2")]),string_esc(" "),string_esc("Caso recursivo: Para una lista no vacía, verifique que el primer elemento ")]),string_esc(" "),string_esc("sea un byte válido y que el resto de la lista sea una lista de bytes válida")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[var([string_esc("L")]),string_esc(" "),string_esc("es una lista de bytes (binarios o hexadecimales). Su implementación es: "),env_(verbatim,[raw_string("byte_list([]).
byte_list([B|Bs]) :-
    byte(B),
    byte_list(Bs).
")])],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("24"),string_esc("L=[]"),string_esc("L=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("25"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list(L)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("26"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("27"),string_esc("L=[[h(0),h(5)],[h(6),h(f)]]"),string_esc("L=[[h(0),h(5)],[h(6),h(f)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("28"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list(L)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("29"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("30"),string_esc("L=[[b(1),b(0),b(1),b(0),b(0),b(1),b(0),b(1)]]"),string_esc("L=[[b(1),b(0),b(1),b(0),b(0),b(1),b(0),b(1)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("31"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list(L)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("32"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("33"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)],[h(a),h(b)]]"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)],[h(a),h(b)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("34"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list(L)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("35"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("36"),string_esc("L=[1,2,3]"),string_esc("L=[1,2,3]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("37"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_list(L)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("38"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("39"),string_esc("L=[[h(a),h(b)],42]"),string_esc("L=[[h(a),h(b)],42]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("40"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_list(L)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("41"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("42"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1)]]"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("43"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_list(L)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("44"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(L)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("45"),string_esc("L=[[h(g),h(5)]]"),string_esc("L=[[h(g),h(5)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("46"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_list(L)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("47"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("byte_convert/2"),pred,"PREDICATE",byte_convert/2,[],[[string_esc("Este predicado es cierto cuando HexByte (en hexadecimal) representa el mismo valor que BinByte (en binario). La implementación convierte cada dígito hexadecimal en su representación binaria de 4 bits y luego concatena estos bits para formar el byte binario completo de 8 bits.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_convert(HexByte,BinByte)")),string_esc([])],raw_nl],[var([string_esc("HexByte")]),string_esc(" "),string_esc("es un byte hexadecimal y "),var([string_esc("BinByte")]),string_esc(" "),string_esc("es su representación binaria equivalente. Su implementación es: "),env_(verbatim,[raw_string("byte_convert([H1,H0],BinByte) :-
    hex_byte([H1,H0]),
    nibble_to_bits(H1,[B7,B6,B5,B4]),
    nibble_to_bits(H0,[B3,B2,B1,B0]),
    BinByte=[B7,B6,B5,B4,B3,B2,B1,B0],
    binary_byte(BinByte).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("HexByte")]),string_esc(" "),string_esc("es una lista de 2 dígitos hexadecimales, del más significativo (posición 1) al menos significativo (posición 0).")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("48"),string_esc("hex_byte/1"),string_esc("hex_byte/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("BinByte")]),string_esc(" "),string_esc("es una lista de 8 bits, del bit más significativo (posición 7) al menos significativo (posición 0).")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("49"),string_esc("binary_byte/1"),string_esc("binary_byte/1"))],string_esc(")")]])]],raw_nl],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_convert(HB,BB)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("50"),string_esc("HB=[h(0),h(0)]"),string_esc("HB=[h(0),h(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("51"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("52"),string_esc("BB=[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]"),string_esc("BB=[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("53"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_convert(HB,BB)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("54"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_convert(HB,BB)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("55"),string_esc("HB=[h(f),h(f)]"),string_esc("HB=[h(f),h(f)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("56"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("57"),string_esc("BB=[b(1),b(1),b(1),b(1),b(1),b(1),b(1),b(1)]"),string_esc("BB=[b(1),b(1),b(1),b(1),b(1),b(1),b(1),b(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("58"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_convert(HB,BB)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("59"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_convert(HB,BB)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("60"),string_esc("HB=[h(5),h(a)]"),string_esc("HB=[h(5),h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("61"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("62"),string_esc("BB=[b(0),b(1),b(0),b(1),b(1),b(0),b(1),b(0)]"),string_esc("BB=[b(0),b(1),b(0),b(1),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("63"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_convert(HB,BB)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("64"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_convert(HB,BB)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("65"),string_esc("HB=[h(a),h(5)]"),string_esc("HB=[h(a),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("66"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("67"),string_esc("BB=[b(1),b(0),b(1),b(0),b(0),b(1),b(0),b(1)]"),string_esc("BB=[b(1),b(0),b(1),b(0),b(0),b(1),b(0),b(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("68"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_convert(HB,BB)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("69"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_convert(HB,BB)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("70"),string_esc("HB=[h(g),h(5)]"),string_esc("HB=[h(g),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("71"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_convert(HB,BB)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("72"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_convert(HB,BB)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("73"),string_esc("HB=[h(a)]"),string_esc("HB=[h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("74"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_convert(HB,BB)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("75"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_convert(HB,BB)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("76"),string_esc("BB=[b(1),b(0),b(0),b(1),b(0),b(1),b(1),b(0)]"),string_esc("BB=[b(1),b(0),b(0),b(1),b(0),b(1),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("77"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("78"),string_esc("HB=[h(9),h(6)]"),string_esc("HB=[h(9),h(6)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("79"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_convert(HB,BB)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("80"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("byte_list_convert/2"),pred,"PREDICATE",byte_list_convert/2,[],[[string_esc("Este predicado es cierto cuando HexList (una lista de bytes hexadecimales) representa el mismo valor que BinList (una lista de bytes binarios). La implementación utiliza recursión con dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Caso base: Una lista vacía de bytes hexadecimales se convierte en una lista vacía de bytes binarios. "),item([string_esc("2")]),string_esc(" "),string_esc("Caso recursivo: Para una lista no vacía, se convierte el primer byte hexadecimal a su representación binaria y se convierte recursivamente el resto de la lista. ")]),string_esc(" ")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_list_convert(HexList,BinList)")),string_esc([])],raw_nl],[var([string_esc("HexList")]),string_esc(" "),string_esc("es una lista de bytes hexadecimales y "),var([string_esc("BinList")]),string_esc(" "),string_esc("es su representación binaria equivalente. Su implementación es: "),env_(verbatim,[raw_string("byte_list_convert([],[]).
byte_list_convert([H|Hs],[B|Bs]) :-
    byte_convert(H,B),
    byte_list_convert(Hs,Bs).
")])],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_convert(HL,BL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("81"),string_esc("HL=[]"),string_esc("HL=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("82"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("83"),string_esc("BL=[]"),string_esc("BL=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("84"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_convert(HL,BL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("85"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_convert(HL,BL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("86"),string_esc("HL=[[h(0),h(0)]]"),string_esc("HL=[[h(0),h(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("87"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("88"),string_esc("BL=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"),string_esc("BL=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("89"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_convert(HL,BL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("90"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_convert(HL,BL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("91"),string_esc("HL=[[h(f),h(f)],[h(0),h(0)]]"),string_esc("HL=[[h(f),h(f)],[h(0),h(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("92"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("93"),string_esc("BL=[[b(1),b(1),b(1),b(1),b(1),b(1),b(1),b(1)],[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"),string_esc("BL=[[b(1),b(1),b(1),b(1),b(1),b(1),b(1),b(1)],[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("94"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_convert(HL,BL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("95"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_convert(HL,BL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("96"),string_esc("HL=[[h(a),h(b)],[h(c),h(d)],[h(e),h(f)]]"),string_esc("HL=[[h(a),h(b)],[h(c),h(d)],[h(e),h(f)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("97"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("98"),string_esc("BL=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(1)],[b(1),b(1),b(0),b(0),b(1),b(1),b(0),b(1)],[b(1),b(1),b(1),b(0),b(1),b(1),b(1),b(1)]]"),string_esc("BL=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(1)],[b(1),b(1),b(0),b(0),b(1),b(1),b(0),b(1)],[b(1),b(1),b(1),b(0),b(1),b(1),b(1),b(1)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("99"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_convert(HL,BL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("100"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_convert(HL,BL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("101"),string_esc("HL=[[h(a),h(b)],[h(g),h(h)]]"),string_esc("HL=[[h(a),h(b)],[h(g),h(h)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("102"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_list_convert(HL,BL)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("103"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_convert(HL,BL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("104"),string_esc("HL=[[h(a),h(b)],[h(c)]]"),string_esc("HL=[[h(a),h(b)],[h(c)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("105"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_list_convert(HL,BL)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("106"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_convert(HL,BL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("107"),string_esc("BL=[[b(0),b(1),b(0),b(1),b(1),b(0),b(1),b(0)],[b(1),b(0),b(0),b(1),b(0),b(1),b(1),b(0)]]"),string_esc("BL=[[b(0),b(1),b(0),b(1),b(1),b(0),b(1),b(0)],[b(1),b(0),b(0),b(1),b(0),b(1),b(1),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("108"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("109"),string_esc("HL=[[h(5),h(a)],[h(9),h(6)]]"),string_esc("HL=[[h(5),h(a)],[h(9),h(6)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("110"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_convert(HL,BL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("111"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("get_nth_bit_from_byte/3"),pred,"PREDICATE",get_nth_bit_from_byte/3,[],[[string_esc("Este predicado es cierto cuando BN es el N-ésimo bit del byte B."),p([]),string_esc("El predicado utiliza dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Si B es un byte binario, invierte el byte y obtiene el N-ésimo bit "),item([string_esc("2")]),string_esc(" "),string_esc("Si B es un byte hexadecimal, lo convierte a binario y luego obtiene el N-ésimo bit ")]),string_esc(" "),string_esc("La implementación usa el predicado byte_convert/2 para convertir el byte hexadecimal a binario, y luego usa reverse_list/2 para invertir el byte binario. El predicado get_nth_bit/3 se usa para extraer el N-ésimo bit del byte invertido.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[var([string_esc("BN")]),string_esc(" "),string_esc("es el "),var([string_esc("N")]),string_esc("-ésimo bit del byte "),var([string_esc("B")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("get_nth_bit_from_byte(N,B,BN) :-
    binary_byte(B),
    reverse_list(B,RevB),
    get_nth_bit(N,RevB,BN).
get_nth_bit_from_byte(N,B,BN) :-
    hex_byte(B),
    byte_convert(B,BinB),
    reverse_list(BinB,RevB),
    get_nth_bit(N,RevB,BN).
")])],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("112"),string_esc("N=0"),string_esc("N=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("113"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("114"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("115"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("116"),string_esc("Bit=b(0)"),string_esc("Bit=b(0)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("117"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("118"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("119"),string_esc("N=s(s(s(0)))"),string_esc("N=s(s(s(0)))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("120"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("121"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("122"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("123"),string_esc("Bit=b(1)"),string_esc("Bit=b(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("124"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("125"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("126"),string_esc("N=s(s(s(s(s(s(s(0)))))))"),string_esc("N=s(s(s(s(s(s(s(0)))))))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("127"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("128"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("129"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("130"),string_esc("Bit=b(1)"),string_esc("Bit=b(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("131"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("132"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("133"),string_esc("N=0"),string_esc("N=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("134"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("135"),string_esc("B=[h(a),h(5)]"),string_esc("B=[h(a),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("136"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("137"),string_esc("Bit=b(1)"),string_esc("Bit=b(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("138"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("139"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("140"),string_esc("N=s(s(s(s(0))))"),string_esc("N=s(s(s(s(0))))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("141"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("142"),string_esc("B=[h(a),h(5)]"),string_esc("B=[h(a),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("143"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("144"),string_esc("Bit=b(0)"),string_esc("Bit=b(0)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("145"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("146"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("147"),string_esc("N=s(s(s(s(s(s(s(0)))))))"),string_esc("N=s(s(s(s(s(s(s(0)))))))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("148"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("149"),string_esc("B=[h(a),h(5)]"),string_esc("B=[h(a),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("150"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("151"),string_esc("Bit=b(1)"),string_esc("Bit=b(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("152"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("153"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("154"),string_esc("N=s(s(s(s(s(s(s(s(0))))))))"),string_esc("N=s(s(s(s(s(s(s(s(0))))))))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("155"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("156"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("157"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("158"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("159"),string_esc("N= -1"),string_esc("N= -1"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("160"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("161"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("162"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("163"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("164"),string_esc("N=0"),string_esc("N=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("165"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("166"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1)]"),string_esc("B=[b(1),b(0),b(1),b(0),b(1),b(0),b(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("167"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("168"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("169"),string_esc("N=0"),string_esc("N=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("170"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("171"),string_esc("B=[h(a)]"),string_esc("B=[h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("172"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("173"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("174"),string_esc("N=0"),string_esc("N=0"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("175"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("176"),string_esc("B=[h(x),h(y)]"),string_esc("B=[h(x),h(y)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("177"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("178"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("179"),string_esc("B=[h(5),h(5)]"),string_esc("B=[h(5),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("180"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("181"),string_esc("BN=b(1)"),string_esc("BN=b(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("182"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("183"),string_esc("N=0;N=s(s(0));N=s(s(s(s(0))));N=s(s(s(s(s(s(0))))))"),string_esc("N=0;N=s(s(0));N=s(s(s(s(0))));N=s(s(s(s(s(s(0))))))"))],raw_nl],[string_esc(" (undefined property)"),[]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("184"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("185"),string_esc("BN=b(1)"),string_esc("BN=b(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("186"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("187"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,Bit)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("188"),string_esc("B=[h(a),h(5)]"),string_esc("B=[h(a),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("189"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("190"),string_esc("N=0,Bit=b(1);N=s(0),Bit=b(0);N=s(s(0)),Bit=b(1);N=s(s(s(0))),Bit=b(0);N=s(s(s(s(0)))),Bit=b(0);N=s(s(s(s(s(0))))),Bit=b(1);N=s(s(s(s(s(s(0)))))),Bit=b(0);N=s(s(s(s(s(s(s(0))))))),Bit=b(1)"),string_esc("N=0,Bit=b(1);N=s(0),Bit=b(0);N=s(s(0)),Bit=b(1);N=s(s(s(0))),Bit=b(0);N=s(s(s(s(0)))),Bit=b(0);N=s(s(s(s(s(0))))),Bit=b(1);N=s(s(s(s(s(s(0)))))),Bit=b(0);N=s(s(s(s(s(s(s(0))))))),Bit=b(1)"))],raw_nl],[string_esc(" (undefined property)"),[]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,Bit)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("191"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,Bit)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("192"),string_esc("N=s(s(s(0)))"),string_esc("N=s(s(s(0)))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("193"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("194"),string_esc("Bit=b(1)"),string_esc("Bit=b(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("195"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,Bit)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("196"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("byte_list_clsh/2"),pred,"PREDICATE",byte_list_clsh/2,[],[[string_esc("Este predicado es cierto cuando CLShL es el resultado de un desplazamiento circular a la izquierda de la lista de bytes L."),p([]),string_esc("El predicado utiliza dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Si L es una lista de bytes binarios, convertir la lista a bits, realizar el desplazamiento circular a la izquierda y volver a convertir a bytes. "),item([string_esc("2")]),string_esc(" "),string_esc("Si L es una lista de bytes hexadecimales, convertir la lista a bytes binarios, realizar el desplazamiento circular a la izquierda y volver a convertir a bytes hexadecimales. ")]),string_esc(" "),string_esc("La implementación utiliza el predicado bytes_to_bits/2 para convertir la lista de bytes a bits, el predicado rotate_left/2 para realizar el desplazamiento circular a la izquierda y el predicado bits_to_bytes/2 para volver a convertir los bits a bytes. El predicado byte_list_convert/2 se utiliza para convertir los bytes hexadecimales a bytes binarios.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[var([string_esc("CLShL")]),string_esc(" "),string_esc("es el resultado de aplicar un desplazamiento circular a la izquierda a la lista de bytes "),var([string_esc("L")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("byte_list_clsh(L,CLShL) :-
    bytes_to_bits(L,AllBits),
    rotate_left(AllBits,RotatedBits),
    bits_to_bytes(RotatedBits,CLShL).
byte_list_clsh(L,CLShL) :-
    byte_list_convert(L,BinList),
    bytes_to_bits(BinList,AllBits),
    rotate_left(AllBits,RotatedBits),
    bits_to_bytes(RotatedBits,BinBytes),
    byte_list_convert(CLShL,BinBytes).
")])],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("197"),string_esc("L=[]"),string_esc("L=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("198"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("199"),string_esc("CLShL=[]"),string_esc("CLShL=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("200"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_clsh(L,CLShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("201"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("202"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("203"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("204"),string_esc("CLShL=[[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)]]"),string_esc("CLShL=[[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("205"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_clsh(L,CLShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("206"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("207"),string_esc("L=[[h(5),h(a)]]"),string_esc("L=[[h(5),h(a)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("208"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("209"),string_esc("CLShL=[[h(b),h(4)]]"),string_esc("CLShL=[[h(b),h(4)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("210"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_clsh(L,CLShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("211"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("212"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)],[b(1),b(1),b(0),b(0),b(1),b(1),b(0),b(0)]]"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)],[b(1),b(1),b(0),b(0),b(1),b(1),b(0),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("213"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("214"),string_esc("CLShL=[[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)],[b(1),b(0),b(0),b(1),b(1),b(0),b(0),b(1)]]"),string_esc("CLShL=[[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)],[b(1),b(0),b(0),b(1),b(1),b(0),b(0),b(1)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("215"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_clsh(L,CLShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("216"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("217"),string_esc("L=[[h(5),h(a)],[h(2),h(3)],[h(5),h(5)],[h(3),h(7)]]"),string_esc("L=[[h(5),h(a)],[h(2),h(3)],[h(5),h(5)],[h(3),h(7)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("218"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("219"),string_esc("CLShL=[[h(b),h(4)],[h(4),h(6)],[h(a),h(a)],[h(6),h(e)]]"),string_esc("CLShL=[[h(b),h(4)],[h(4),h(6)],[h(a),h(a)],[h(6),h(e)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("220"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_clsh(L,CLShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("221"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("222"),string_esc("L=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"),string_esc("L=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("223"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("224"),string_esc("CLShL=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"),string_esc("CLShL=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("225"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_clsh(L,CLShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("226"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("227"),string_esc("L=[[h(a),h(5)],[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]"),string_esc("L=[[h(a),h(5)],[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("228"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_list_clsh(L,CLShL)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("229"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("byte_list_crsh/2"),pred,"PREDICATE",byte_list_crsh/2,[],[[string_esc("Este predicado es cierto cuando CRShL es el resultado de un desplazamiento circular a la derecha de la lista de bytes L."),p([]),string_esc("El predicado utiliza dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Si L es una lista de bytes binarios, convertir la lista a bits, realizar el desplazamiento circular a la derecha y volver a convertir a bytes. "),item([string_esc("2")]),string_esc(" "),string_esc("Si L es una lista de bytes hexadecimales, convertir la lista a bytes binarios, realizar el desplazamiento circular a la derecha y volver a convertir a bytes hexadecimales. ")]),string_esc(" "),string_esc("La implementación utiliza el predicado bytes_to_bits/2 para convertir la lista de bytes a bits, el predicado rotate_right/2 para realizar el desplazamiento circular a la derecha y el predicado bits_to_bytes/2 para volver a convertir los bits a bytes. El predicado byte_list_convert/2 se utiliza para convertir los bytes hexadecimales a bytes binarios y viceversa.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[var([string_esc("CRShL")]),string_esc(" "),string_esc("es el resultado de aplicar un desplazamiento circular a la derecha a la lista de bytes "),var([string_esc("L")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("byte_list_crsh(L,CRShL) :-
    bytes_to_bits(L,AllBits),
    rotate_right(AllBits,RotatedBits),
    bits_to_bytes(RotatedBits,CRShL).
byte_list_crsh(L,CRShL) :-
    byte_list_convert(L,BinList),
    bytes_to_bits(BinList,AllBits),
    rotate_right(AllBits,RotatedBits),
    bits_to_bytes(RotatedBits,BinBytes),
    byte_list_convert(CRShL,BinBytes).
")])],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("230"),string_esc("L=[]"),string_esc("L=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("231"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("232"),string_esc("CRShL=[]"),string_esc("CRShL=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("233"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_crsh(L,CRShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("234"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("235"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("236"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("237"),string_esc("CRShL=[[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)]]"),string_esc("CRShL=[[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("238"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_crsh(L,CRShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("239"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("240"),string_esc("L=[[h(5),h(a)]]"),string_esc("L=[[h(5),h(a)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("241"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("242"),string_esc("CRShL=[[h(2),h(d)]]"),string_esc("CRShL=[[h(2),h(d)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("243"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_crsh(L,CRShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("244"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("245"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)],[b(1),b(1),b(0),b(0),b(1),b(1),b(0),b(0)]]"),string_esc("L=[[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)],[b(1),b(1),b(0),b(0),b(1),b(1),b(0),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("246"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("247"),string_esc("CRShL=[[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)],[b(0),b(1),b(1),b(0),b(0),b(1),b(1),b(0)]]"),string_esc("CRShL=[[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)],[b(0),b(1),b(1),b(0),b(0),b(1),b(1),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("248"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_crsh(L,CRShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("249"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("250"),string_esc("L=[[h(b),h(4)],[h(4),h(6)],[h(a),h(a)],[h(6),h(e)]]"),string_esc("L=[[h(b),h(4)],[h(4),h(6)],[h(a),h(a)],[h(6),h(e)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("251"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("252"),string_esc("CRShL=[[h(5),h(a)],[h(2),h(3)],[h(5),h(5)],[h(3),h(7)]]"),string_esc("CRShL=[[h(5),h(a)],[h(2),h(3)],[h(5),h(5)],[h(3),h(7)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("253"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_crsh(L,CRShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("254"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("255"),string_esc("L=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"),string_esc("L=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("256"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("257"),string_esc("CRShL=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"),string_esc("CRShL=[[b(0),b(0),b(0),b(0),b(0),b(0),b(0),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("258"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_crsh(L,CRShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("259"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("260"),string_esc("L=[[h(f),h(f)]]"),string_esc("L=[[h(f),h(f)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("261"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("262"),string_esc("CRShL=[[h(f),h(f)]]"),string_esc("CRShL=[[h(f),h(f)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("263"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_crsh(L,CRShL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("264"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CRShL)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("265"),string_esc("L=[[h(a),h(5)],[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]"),string_esc("L=[[h(a),h(5)],[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("266"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_list_crsh(L,CRShL)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("267"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("byte_xor/3"),pred,"PREDICATE",byte_xor/3,[],[[string_esc("Este predicado es cierto cuando B3 es el resultado de la operación XOR entre B1 y B2."),p([]),string_esc("El predicado utiliza dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Si B1 y B2 son bytes binarios, invertir ambos bytes, realizar la operación XOR e invertir el resultado. "),item([string_esc("2")]),string_esc(" "),string_esc("Si B1 y B2 son bytes hexadecimales, convertirlos a binarios, realizar la operación XOR y volver a convertir el resultado a hexadecimal. ")]),string_esc(" "),string_esc("La implementación utiliza byte/1 para comprobar que B1 y B2 son bytes válidos, el predicado byte_convert/2 para convertir el byte hexadecimal a binario y viceversa, el predicado reverse_list/2 para invertir los bytes y el predicado xor_list/3 para realizar la operación XOR en bits individuales.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[var([string_esc("B3")]),string_esc(" "),string_esc("es el resultado de la operación XOR entre "),var([string_esc("B1")]),string_esc(" "),string_esc("y "),var([string_esc("B2")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("byte_xor([],[],[]).
byte_xor(B1,B2,B3) :-
    byte(B1),
    byte(B2),
    reverse_list(B1,RevB1),
    reverse_list(B2,RevB2),
    xor_list(RevB1,RevB2,RevB3),
    reverse_list(RevB3,B3).
byte_xor(B1,B2,B3) :-
    byte(B1),
    byte(B2),
    byte_convert(B1,BinB1),
    byte_convert(B2,BinB2),
    reverse_list(BinB1,RevBinB1),
    reverse_list(BinB2,RevBinB2),
    xor_list(RevBinB1,RevBinB2,RevBinB3),
    reverse_list(RevBinB3,RevB3),
    byte_convert(B3,RevB3).
")])],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("268"),string_esc("B1=[]"),string_esc("B1=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("269"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("270"),string_esc("B2=[]"),string_esc("B2=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("271"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("272"),string_esc("B3=[]"),string_esc("B3=[]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("273"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("274"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("275"),string_esc("B1=[h(5),h(a)]"),string_esc("B1=[h(5),h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("276"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("277"),string_esc("B2=[h(2),h(3)]"),string_esc("B2=[h(2),h(3)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("278"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("279"),string_esc("B3=[h(7),h(9)]"),string_esc("B3=[h(7),h(9)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("280"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("281"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("282"),string_esc("B1=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"),string_esc("B1=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("283"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("284"),string_esc("B2=[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)]"),string_esc("B2=[b(0),b(1),b(0),b(1),b(0),b(1),b(0),b(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("285"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("286"),string_esc("B3=[b(1),b(1),b(1),b(1),b(1),b(1),b(1),b(1)]"),string_esc("B3=[b(1),b(1),b(1),b(1),b(1),b(1),b(1),b(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("287"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("288"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("289"),string_esc("B1=[h(a),h(a)]"),string_esc("B1=[h(a),h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("290"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("291"),string_esc("B2=[h(5),h(5)]"),string_esc("B2=[h(5),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("292"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("293"),string_esc("B3=[h(f),h(f)]"),string_esc("B3=[h(f),h(f)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("294"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("295"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("296"),string_esc("B1=[h(a),h(a)]"),string_esc("B1=[h(a),h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("297"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("298"),string_esc("B2=[h(a),h(a)]"),string_esc("B2=[h(a),h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("299"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("300"),string_esc("B3=[h(0),h(0)]"),string_esc("B3=[h(0),h(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("301"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("302"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("303"),string_esc("B1=[h(c),h(d)]"),string_esc("B1=[h(c),h(d)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("304"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("305"),string_esc("B2=[h(0),h(0)]"),string_esc("B2=[h(0),h(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("306"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("307"),string_esc("B3=[h(c),h(d)]"),string_esc("B3=[h(c),h(d)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("308"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("309"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("310"),string_esc("B1=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"),string_esc("B1=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("311"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("312"),string_esc("B2=[b(1),b(0),b(1),b(0),b(1),b(0),b(1)]"),string_esc("B2=[b(1),b(0),b(1),b(0),b(1),b(0),b(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("313"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("314"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("315"),string_esc("B1=[h(a),h(a)]"),string_esc("B1=[h(a),h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("316"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("317"),string_esc("B2=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"),string_esc("B2=[b(1),b(0),b(1),b(0),b(1),b(0),b(1),b(0)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("318"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("319"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("320"),string_esc("B1=[h(5),h(5)]"),string_esc("B1=[h(5),h(5)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("321"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("322"),string_esc("B3=[h(a),h(a)]"),string_esc("B3=[h(a),h(a)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("323"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("324"),string_esc("B2=[h(f),h(f)]"),string_esc("B2=[h(f),h(f)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("325"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("326"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("nibble_to_bits/2"),pred,"PREDICATE",nibble_to_bits/2,[],[[string_esc("Este predicado convierte un dígito hexadecimal (nibble) a su representación binaria de 4 bits.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("nibble_to_bits(Nibble,Bits)")),string_esc([])],raw_nl],[var([string_esc("Bits")]),string_esc(" "),string_esc("es la lista de 4 bits que representa al nibble hexadecimal "),var([string_esc("Nibble")]),string_esc(".")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("reverse_list/2"),pred,"PREDICATE",reverse_list/2,[],[[string_esc("Este predicado es cierto cuando Reversed es la inversión de List.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("reverse_list(List,Reversed)")),string_esc([])],raw_nl],[var([string_esc("Reversed")]),string_esc(" "),string_esc("es la inversión de la lista "),var([string_esc("List")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("reverse_list(List,Reversed) :-
    reverse_acc(List,[],Reversed).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("reverse_acc/3"),pred,"PREDICATE",reverse_acc/3,[],[[string_esc("El predicado es cierto cuando Reversed es la concatenación de Acc y List invertida."),p([]),string_esc("La implementación utiliza recursión de cola con dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Caso base: Una lista vacía invertida es el acumulador actual "),item([string_esc("2")]),string_esc(" "),string_esc("Caso recursivo: Para una lista no vacía, se añade el primer elemento al inicio del acumulador y se invierte recursivamente el resto de la lista. ")]),string_esc(" ")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("reverse_acc(List,Acc,Reversed)")),string_esc([])],raw_nl],[var([string_esc("Reversed")]),string_esc(" "),string_esc("es el resultado de invertir la lista "),var([string_esc("List")]),string_esc(" "),string_esc("usando "),var([string_esc("Acc")]),string_esc(" "),string_esc("como acumulador. Su implementación es: "),env_(verbatim,[raw_string("reverse_acc([],Acc,Acc).
reverse_acc([X|Xs],Acc,Reversed) :-
    reverse_acc(Xs,[X|Acc],Reversed).
")])],assrtprops([[item([]),em(string_esc("Call and exit should be compatible with:"))],[[linebreak,left_and_right([[var([string_esc("List")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("327"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Acc")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("328"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])],[linebreak,left_and_right([[var([string_esc("Reversed")]),string_esc(" "),string_esc("is a list.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("329"),string_esc("list/1"),string_esc("list/1"))],string_esc(")")]])]],raw_nl],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("get_nth_bit/3"),pred,"PREDICATE",get_nth_bit/3,[],[[string_esc("Este predicado es cierto cuando BN es el N-ésimo bit del byte invertido Bits."),p([]),string_esc("La implementación utiliza recursión con dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Caso base: Si N es 0, el primer elemento de Bits es el bit deseado. "),item([string_esc("2")]),string_esc(" "),string_esc("Caso recursivo: Para un N distinto de cero, decrementar N y ")]),string_esc(" "),string_esc("llamar recursivamente al predicado con la cola de la lista (Bits) para encontrar el siguiente bit.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("get_nth_bit(N,Bits,BN)")),string_esc([])],raw_nl],[var([string_esc("BN")]),string_esc(" "),string_esc("es el "),var([string_esc("N")]),string_esc("-ésimo bit de la lista de bits "),var([string_esc("Bits")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("get_nth_bit(0,[BN|_1],BN).
get_nth_bit(s(N),[_1|Bits],BN) :-
    get_nth_bit(N,Bits,BN).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("my_append/3"),pred,"PREDICATE",my_append/3,[],[[string_esc("Este predicado es cierto cuando Result es la concatenación de List1 y List2."),p([]),string_esc("La implementación utiliza recursión con dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Caso base: Una lista vacía concatenada con otra lista es la segunda lista. "),item([string_esc("2")]),string_esc(" "),string_esc("Caso recursivo: Para una lista no vacía, anteponga el encabezado de Lista1 al resultado y concatene recursivamente el final de Lista1 con Lista2. ")]),string_esc(" ")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("my_append(List1,List2,Result)")),string_esc([])],raw_nl],[var([string_esc("Result")]),string_esc(" "),string_esc("es la concatenación de "),var([string_esc("List1")]),string_esc(" "),string_esc("y "),var([string_esc("List2")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("my_append([],L,L).
my_append([H|T],L,[H|R]) :-
    my_append(T,L,R).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("bytes_to_bits/2"),pred,"PREDICATE",bytes_to_bits/2,[],[[string_esc("Este predicado convierte una lista de bytes a una lista plana de bits."),p([]),string_esc("La implementación utiliza recursión con dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Caso base: Una lista vacía de bits se convierte en una lista vacía de bytes. "),item([string_esc("2")]),string_esc(" "),string_esc("Caso recursivo: Para una lista no vacía, se convierten los primeros 8 bits en un byte y el resto de los bits en bytes recursivamente. ")]),string_esc(" "),string_esc("La implementación utiliza el predicado binary_byte/1 para comprobar que los primeros 8 bits formen un byte binario válido. El predicado my_append/3 se utiliza para concatenar los bits en un solo byte.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("bytes_to_bits(Bytes,Bits)")),string_esc([])],raw_nl],[var([string_esc("Bits")]),string_esc(" "),string_esc("es la lista plana de bits correspondiente a la lista de bytes "),var([string_esc("Bytes")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("bytes_to_bits([],[]).
bytes_to_bits([B|Bs],Bits) :-
    binary_byte(B),
    bytes_to_bits(Bs,RestBits),
    my_append(B,RestBits,Bits).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("rotate_left/2"),pred,"PREDICATE",rotate_left/2,[],[[string_esc("Este predicado realiza una rotación circular a la izquierda de una lista."),p([]),string_esc("% La implementación utiliza dos cláusulas: % 1. Una lista vacía se rota a una lista vacía % 2. Para una lista no vacía, se añade el final de la lista al principio y se devuelve la lista rotada, utilizando el predicado my_append/3.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("rotate_left(List,Rotated)")),string_esc([])],raw_nl],[var([string_esc("Rotated")]),string_esc(" "),string_esc("es el resultado de rotar la lista "),var([string_esc("List")]),string_esc(" "),string_esc("un lugar a la izquierda. Su implementación es: "),env_(verbatim,[raw_string("rotate_left([],[]).
rotate_left([H|T],Rotated) :-
    my_append(T,[H],Rotated).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("bits_to_bytes/2"),pred,"PREDICATE",bits_to_bytes/2,[],[[string_esc("Este predicado convierte una lista plana de bits a una lista de bytes."),p([]),string_esc("La implementación utiliza recursión con dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Caso base: Una lista vacía de bits se convierte en una lista vacía de bytes. "),item([string_esc("2")]),string_esc(" "),string_esc("Caso recursivo: Para una lista no vacía, se convierten los primeros 8 bits en un byte y el resto de los bits se convierten recursivamente en bytes. ")]),string_esc(" "),string_esc("El predicado my_append/3 se utiliza para concatenar los bits en un solo byte.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("bits_to_bytes(Bits,Bytes)")),string_esc([])],raw_nl],[var([string_esc("Bytes")]),string_esc(" "),string_esc("es la lista de bytes formada a partir de la lista de bits "),var([string_esc("Bits")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("bits_to_bytes([],[]).
bits_to_bytes([B1,B2,B3,B4,B5,B6,B7,B8|RestBits],[H|RestBytes]) :-
    my_append([B1,B2,B3,B4],[B5,B6,B7,B8],H),
    bits_to_bytes(RestBits,RestBytes).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("rotate_right/2"),pred,"PREDICATE",rotate_right/2,[],[[string_esc("Este predicado realiza una rotación circular a la derecha de una lista."),p([]),string_esc("El predicado reverse_list/2 se usa para invertir la lista, y luego el predicado rotate_left/2 se usa para realizar el desplazamiento circular a la izquierda en la lista invertida. Finalmente, el predicado reverse_list/2 se usa nuevamente para invertir la lista rotada a su orden original.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("rotate_right(List,Rotated)")),string_esc([])],raw_nl],[var([string_esc("Rotated")]),string_esc(" "),string_esc("es el resultado de rotar la lista "),var([string_esc("List")]),string_esc(" "),string_esc("un lugar a la derecha. Su implementación es: "),env_(verbatim,[raw_string("rotate_right(L,Rotated) :-
    reverse_list(L,Reversed),
    rotate_left(Reversed,RotatedReversed),
    reverse_list(RotatedReversed,Rotated).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("xor_list/3"),pred,"PREDICATE",xor_list/3,[],[[string_esc("Este predicado realiza la operación XOR bit a bit entre dos listas de bits."),p([]),string_esc("La implementación utiliza recursión con dos cláusulas: "),env_(enumerate,[string_esc(" "),item([string_esc("1")]),string_esc(" "),string_esc("Caso base: Una lista vacía que se aplica mediante una operación XOR con otra lista vacía es una lista vacía. "),item([string_esc("2")]),string_esc(" "),string_esc("Caso recursivo: Para una lista no vacía, se realiza la operación XOR en los primeros elementos de ambas listas y se aplica recursivamente la operación XOR al resto de las listas. ")]),string_esc(" "),string_esc("El predicado xor_bits/3 se utiliza para realizar la operación XOR en bits individuales.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("xor_list(List1,List2,Result)")),string_esc([])],raw_nl],[var([string_esc("Result")]),string_esc(" "),string_esc("es el resultado de aplicar la operación XOR bit a bit entre "),var([string_esc("List1")]),string_esc(" "),string_esc("y "),var([string_esc("List2")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("xor_list([],[],[]).
xor_list([B1|Bs1],[B2|Bs2],[B3|Bs3]) :-
    xor_bits(B1,B2,B3),
    xor_list(Bs1,Bs2,Bs3).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("xor_bits/3"),pred,"PREDICATE",xor_bits/3,[],[[string_esc("Este predicado realiza la operación XOR entre dos bits.")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("xor_bits(B1,B2,B3)")),string_esc([])],raw_nl],[var([string_esc("B3")]),string_esc(" "),string_esc("es el resultado de la operación XOR entre los bits "),var([string_esc("B1")]),string_esc(" "),string_esc("y "),var([string_esc("B2")]),string_esc(". Su implementación es: "),env_(verbatim,[raw_string("xor_bits(b(0),b(0),b(0)).
xor_bits(b(0),b(1),b(1)).
xor_bits(b(1),b(0),b(1)).
xor_bits(b(1),b(1),b(0)).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl]]),[],[],section_env([with_parent,level(2)],local_label("Documentation on imports"),string_esc("Documentation on imports"),[string_esc("This module has the following direct dependencies:"),itemize_env(minus,[nop,nop,nop,[item([]),em([string_esc("Internal (engine) modules"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("330"),string_esc("term_basic"),string_esc("term_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("331"),string_esc("basiccontrol"),string_esc("basiccontrol")),string_esc(", ")],[idx_env(use,code,localnum_label("332"),string_esc("debugger_support"),string_esc("debugger_support")),string_esc(", ")],[idx_env(use,code,localnum_label("333"),string_esc("basic_props"),string_esc("basic_props")),string_esc(".")]],raw_nl]],[item([]),em([string_esc("Packages"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("334"),string_esc("pure"),string_esc("pure")),string_esc(", ")],[idx_env(use,code,localnum_label("335"),string_esc("initial"),string_esc("initial")),string_esc(", ")],[idx_env(use,code,localnum_label("336"),string_esc("condcomp"),string_esc("condcomp")),string_esc(", ")],[idx_env(use,code,localnum_label("337"),string_esc("assertions"),string_esc("assertions")),string_esc(", ")],[idx_env(use,code,localnum_label("338"),string_esc("assertions/assertions_basic"),string_esc("assertions/assertions_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("339"),string_esc("regtypes"),string_esc("regtypes")),string_esc(".")]],raw_nl]]])])]],section_env([unnumbered,level(1),subfile(search),is_special(search)],global_label("Search this manual"),string_esc("Search this manual"),[[raw_nl,[string_esc("Type below to search for where concepts, predicates,
 modes, properties, types, applications, authors, etc., are defined or
 referred to in this manual. Use "),tt(string_esc("_")),string_esc(" to show all entries in the index.")],linebreak],linebreak,htmlenv(input,[type="text",id="search-input"],[]),htmlenv(div,[id="search-results"],[]),htmlenv(div,[id="search-index",style="display:none"],[show_index(global)])])]).